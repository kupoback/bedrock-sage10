{"version":3,"file":"vue.0beb8538ace24e6a601a.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;AAAA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAGA;AACA;;AAGA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;;AAEA;AACA;AACA;;AAEA;AAOA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClGA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACZA","sources":["webpack://sage/./resources/vue/Vuex/blog/actions.js","webpack://sage/./resources/vue/Vuex/blog/state.js","webpack://sage/webpack/runtime/getFullHash"],"sourcesContent":["import axios from \"axios\";\n\n//region Action Functions\nconst windowUrl = new URL(window.location);\n\n/**\n * Makes an API call and setups data to store state,\n * as well as whether to update the browser history\n *\n * @param {string} api The API Url to make a call to\n * @param {object} store The vuex store state\n * @param {object} config Any config content to send to\n * @param {int} page The page number\n * @param {boolean} updateHistory Whether or not to update the browser history\n * @param {boolean} pushData Whether to add data to the var or replace it\n *\n * @returns {Promise<unknown>}\n */\nconst makeApiCall = (api, store, config = {params: {}}, page = 1, updateHistory = false, pushData = false) => {\n\tupdateLoading(store, true);\n\tlet commitType = \"updateState\";\n\tif (pushData) commitType = \"mergeData\";\n\n\treturn axios\n\t\t.get(api, config)\n\t\t.then(({data, status}) => {\n\t\t\tconst {maxPages, posts, postTypeCount} = data;\n\t\t\t(status === 200 && data.status !== 404) && store.commit(commitType, {maxPages: Number(maxPages), page, posts});\n\t\t\tpostTypeCount !== undefined && store.commit('searchPostTypeCount', {postTypeCount});\n\t\t})\n\t\t.catch(err => console.error(err))\n\t\t.finally(() => {\n\t\t\t// Remove the Page Number from the query params if on the first page\n\t\t\tif (page > 1) config.params.page_num = page;\n\t\t\telse delete config.params.page_num;\n\n\t\t\t// Remove the updateCount from the query params\n\t\t\tdelete config.params.updateCount;\n\n\t\t\tstore.commit(\"setQuery\", config.params);\n\t\t\tif (updateHistory) store.dispatch(\"updateBrowserHistory\", {updateHistory});\n\t\t\tupdateLoading(store);\n\t\t});\n};\n\n\n/**\n * Makes an update to the store state on the `loading` condition\n *\n * @param {object} store    The Vuex store state\n * @param {boolean} loading Whether the loading animation should appear or not\n * @returns {*}\n */\nconst updateLoading = (store, loading = false) => store.commit(\"updateState\", {loading})\n//endregion\n\n/**\n * Method to make an API call to get the content for the Blogs Page\n *\n * @param {object} store\n * @param {object} params Any parameters for the API call\n * @returns {Promise<AxiosResponse<any> | void>}\n */\nexport function getBlogPosts(store, params = {update: false})\n{\n\tconst {update} = params;\n\tconst {api, page, selectedCategories, search} = store.state;\n\tconst config = {params: {}};\n\n\t// Setup Config\n\tif (search) config.params.search = search;\n\t// if (selectedCategories.length) config.params.categories = selectedCategories;\n\n\treturn makeApiCall(\n\t\tapi + (page || 1),\n\t\tstore,\n\t\tconfig,\n\t\t(page || 1),\n\t\tupdate,\n\t);\n}\n\n/**\n * Method to build and send to the browser's history any\n * query parameters built on the page when the user filters\n * any content\n *\n * @param {object} store The Vuex store state\n * @param {boolean} updateHistory Whether to update the history or not\n */\nexport function updateBrowserHistory(store, updateHistory = false)\n{\n\tconst {searchParams} = store.state;\n\tlet newUrl = \"\";\n\tif (searchParams.toString() && updateHistory) newUrl = `?${searchParams.toString()}`;\n\n\tconst urlLocation = windowUrl.origin + windowUrl.pathname + newUrl;\n\twindow.history.pushState({path: urlLocation}, document.title, urlLocation);\n}\n","let blog = typeof BLOG !== 'undefined' && BLOG;\n\nexport default {\n\t...blog,\n\tloading: false,\n\tmaxPages: 0,\n\tpage: 1,\n\tposts: [],\n\tqueryParams: {},\n\tsearch: '',\n\tsearchParams: {},\n\tsearchPostTypeCount: null,\n\tselectedCategories: null,\n};\n","__webpack_require__.h = function() { return \"1a144c18253d8aa3d8b9\"; }"],"names":[],"sourceRoot":""}